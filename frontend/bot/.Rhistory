}
generateOneRun <- function(r, h, lambda, L, s, S, T) {
set.seed(1)
cur.time <<- 0
SS <<- c(S, 0)                # c(x,y)
EL <<- c(0, Inf)              # c(t_0, t_1)
U <<- runif(1)
EL[1] <<- -(1/2.5)*log(U)
R <<- 0; H <<- 0; Cost <<- 0
lost <<- 0                     # unmet demand
while(min(EL) <= T) {
if(EL[1] < EL[2]) {
updateCustomerArr(r, h, lambda, L, s, S)
} else {
updateOrderArr(r, h, lambda, s, S)
}
}
H <<- H
profit <- R - H - Cost
c(profit,lost)
}
set.seed(1)
profits <- rep(0, 100)
losts <- rep(0, 100)
for (i in 1:100) {
profits[i] = generateOneRun(2, 0.25, 2.5,3, 75, 100, 100)[1]
losts[i] = generateOneRun(2, 0.25, 2.5,3, 75, 100, 100)[2]
}
mean(profits)
sd(profits)
# Question 2
orderCost <- function(y) y
invertDiscreteCdfDirect <- function(U, prob.vec) {
p.sum <- prob.vec[1]
for(ii in 1:(length(prob.vec)-1)) {
if(U <= p.sum)
return(ii) else
p.sum <- p.sum + prob.vec[ii+1]
}
return(length(prob.vec))
}
invertDiscreteCdfDirect <- Vectorize(invertDiscreteCdfDirect,
vectorize.args="U")
G <- function() {
# Your code here
set.seed(1)
U <- runif(1)
binom_density <- dbinom(0:10, 10, 0.8)
X <- invertDiscreteCdfDirect(U, binom_density) -1
D <- X + 1
D
}
updateCustomerArr <- function(r, h, lambda, L, s, S) {
H <<- H + h*SS[1]*(EL[1] - cur.time)
cur.time <<- EL[1]
D <- G()
w <- min(D, SS[1])
if(w < D) {
## update unmet demand here
lost <<- lost + D - SS[1]
}
SS[1] <<- SS[1]-w
R <<- R + w*r
if(SS[1] < s & SS[2] == 0) {
SS[2] <<- S - SS[1]
EL[2] <<- cur.time + L
}
U <- runif(1)
EL[1] <<- cur.time - (1/2.5)*log(U)
}
updateOrderArr <- function(r, h, lambda, s, S) {
H <<- H + h*SS[1]*(EL[2] - cur.time)
cur.time <<- EL[2]
Cost <<- Cost + SS[2]
SS[1] <<- SS[1] + SS[2]
SS[2] <<- 0
EL[2] <<- Inf
}
generateOneRun <- function(r, h, lambda, L, s, S, T) {
cur.time <<- 0
SS <<- c(S, 0)                # c(x,y)
EL <<- c(0, Inf)              # c(t_0, t_1)
U <<- runif(1)
EL[1] <<- -(1/2.5)*log(U)
R <<- 0; H <<- 0; Cost <<- 0
lost <<- 0                     # unmet demand
while(min(EL) <= T) {
if(EL[1] < EL[2]) {
updateCustomerArr(r, h, lambda, L, s, S)
} else {
updateOrderArr(r, h, lambda, s, S)
}
}
H <<- H
profit <- R - H - Cost
c(profit,lost)
}
set.seed(1)
profits <- rep(0, 100)
losts <- rep(0, 100)
for (i in 1:100) {
profits[i] = generateOneRun(2, 0.25, 2.5,3, 75, 100, 100)[1]
losts[i] = generateOneRun(2, 0.25, 2.5,3, 75, 100, 100)[2]
}
mean(profits)
sd(profits)
set.seed(1)
generateOneRun(2, 0.25, 2.5, 3, 75, 100, 100)
profits[1]
losts[1]
losts[2]
losts[2]
set.seed(1)
generateOneRun(2, 0.25, 2.5, 3, 75, 100, 100)
# Question 2
orderCost <- function(y) y
invertDiscreteCdfDirect <- function(U, prob.vec) {
p.sum <- prob.vec[1]
for(ii in 1:(length(prob.vec)-1)) {
if(U <= p.sum)
return(ii) else
p.sum <- p.sum + prob.vec[ii+1]
}
return(length(prob.vec))
}
invertDiscreteCdfDirect <- Vectorize(invertDiscreteCdfDirect,
vectorize.args="U")
G <- function() {
# Your code here
U <- runif(1)
binom_density <- dbinom(0:10, 10, 0.8)
X <- invertDiscreteCdfDirect(U, binom_density) -1
D <- X + 1
D
}
updateCustomerArr <- function(r, h, lambda, L, s, S) {
H <<- H + h*SS[1]*(EL[1] - cur.time)
cur.time <<- EL[1]
D <- G()
w <- min(D, SS[1])
if(w < D) {
## update unmet demand here
lost <<- lost + D - SS[1]
}
SS[1] <<- SS[1]-w
R <<- R + w*r
if(SS[1] < s & SS[2] == 0) {
SS[2] <<- S - SS[1]
EL[2] <<- cur.time + L
}
U <- runif(1)
EL[1] <<- cur.time - (1/2.5)*log(U)
}
updateOrderArr <- function(r, h, lambda, s, S) {
H <<- H + h*SS[1]*(EL[2] - cur.time)
cur.time <<- EL[2]
Cost <<- Cost + SS[2]
SS[1] <<- SS[1] + SS[2]
SS[2] <<- 0
EL[2] <<- Inf
}
generateOneRun <- function(r, h, lambda, L, s, S, T) {
cur.time <<- 0
SS <<- c(S, 0)                # c(x,y)
EL <<- c(0, Inf)              # c(t_0, t_1)
U <<- runif(1)
EL[1] <<- -(1/2.5)*log(U)
R <<- 0; H <<- 0; Cost <<- 0
lost <<- 0                     # unmet demand
while(min(EL) <= T) {
if(EL[1] < EL[2]) {
updateCustomerArr(r, h, lambda, L, s, S)
} else {
updateOrderArr(r, h, lambda, s, S)
}
}
H <<- H
profit <- R - H - Cost
c(profit,lost)
}
set.seed(1)
profits <- rep(0, 100)
losts <- rep(0, 100)
for (i in 1:100) {
profits[i] = generateOneRun(2, 0.25, 2.5,3, 75, 100, 100)[1]
losts[i] = generateOneRun(2, 0.25, 2.5,3, 75, 100, 100)[2]
}
set.seed(1)
generateOneRun(2, 0.25, 2.5, 3, 75, 100, 100)
losts[1]
x<- rep(rep(0, 2), 2)
x
x <- matrix(0, 2, 3)
x
x[2][3]
x[3][2]
x[2,3]
x[3,3]
x[1,]
x[, 1] <- generateOneRun(2, 0.25, 2.5, 3, 75, 100, 100)
x
orderCost <- function(y) y
invertDiscreteCdfDirect <- function(U, prob.vec) {
p.sum <- prob.vec[1]
for(ii in 1:(length(prob.vec)-1)) {
if(U <= p.sum)
return(ii) else
p.sum <- p.sum + prob.vec[ii+1]
}
return(length(prob.vec))
}
invertDiscreteCdfDirect <- Vectorize(invertDiscreteCdfDirect,
vectorize.args="U")
G <- function() {
# Your code here
U <- runif(1)
binom_density <- dbinom(0:10, 10, 0.8)
X <- invertDiscreteCdfDirect(U, binom_density) -1
D <- X + 1
D
}
updateCustomerArr <- function(r, h, lambda, L, s, S) {
H <<- H + h*SS[1]*(EL[1] - cur.time)
cur.time <<- EL[1]
D <- G()
w <- min(D, SS[1])
if(w < D) {
## update unmet demand here
lost <<- lost + D - SS[1]
}
SS[1] <<- SS[1]-w
R <<- R + w*r
if(SS[1] < s & SS[2] == 0) {
SS[2] <<- S - SS[1]
EL[2] <<- cur.time + L
}
U <- runif(1)
EL[1] <<- cur.time - (1/2.5)*log(U)
}
updateOrderArr <- function(r, h, lambda, s, S) {
H <<- H + h*SS[1]*(EL[2] - cur.time)
cur.time <<- EL[2]
Cost <<- Cost + SS[2]
SS[1] <<- SS[1] + SS[2]
SS[2] <<- 0
EL[2] <<- Inf
}
generateOneRun <- function(r, h, lambda, L, s, S, T) {
cur.time <<- 0
SS <<- c(S, 0)                # c(x,y)
EL <<- c(0, Inf)              # c(t_0, t_1)
U <<- runif(1)
EL[1] <<- -(1/2.5)*log(U)
R <<- 0; H <<- 0; Cost <<- 0
lost <<- 0                     # unmet demand
while(min(EL) <= T) {
if(EL[1] < EL[2]) {
updateCustomerArr(r, h, lambda, L, s, S)
} else {
updateOrderArr(r, h, lambda, s, S)
}
}
H <<- H
profit <- R - H - Cost
c(profit,lost)
}
set.seed(1)
runs <- matrix(0, 2, 100)
for (i in 1:100) {
profits[,i] = generateOneRun(2, 0.25, 2.5,3, 75, 100, 100)
}
# Question 2
orderCost <- function(y) y
invertDiscreteCdfDirect <- function(U, prob.vec) {
p.sum <- prob.vec[1]
for(ii in 1:(length(prob.vec)-1)) {
if(U <= p.sum)
return(ii) else
p.sum <- p.sum + prob.vec[ii+1]
}
return(length(prob.vec))
}
invertDiscreteCdfDirect <- Vectorize(invertDiscreteCdfDirect,
vectorize.args="U")
G <- function() {
# Your code here
U <- runif(1)
binom_density <- dbinom(0:10, 10, 0.8)
X <- invertDiscreteCdfDirect(U, binom_density) -1
D <- X + 1
D
}
updateCustomerArr <- function(r, h, lambda, L, s, S) {
H <<- H + h*SS[1]*(EL[1] - cur.time)
cur.time <<- EL[1]
D <- G()
w <- min(D, SS[1])
if(w < D) {
## update unmet demand here
lost <<- lost + D - SS[1]
}
SS[1] <<- SS[1]-w
R <<- R + w*r
if(SS[1] < s & SS[2] == 0) {
SS[2] <<- S - SS[1]
EL[2] <<- cur.time + L
}
U <- runif(1)
EL[1] <<- cur.time - (1/2.5)*log(U)
}
updateOrderArr <- function(r, h, lambda, s, S) {
H <<- H + h*SS[1]*(EL[2] - cur.time)
cur.time <<- EL[2]
Cost <<- Cost + SS[2]
SS[1] <<- SS[1] + SS[2]
SS[2] <<- 0
EL[2] <<- Inf
}
generateOneRun <- function(r, h, lambda, L, s, S, T) {
cur.time <<- 0
SS <<- c(S, 0)                # c(x,y)
EL <<- c(0, Inf)              # c(t_0, t_1)
U <<- runif(1)
EL[1] <<- -(1/2.5)*log(U)
R <<- 0; H <<- 0; Cost <<- 0
lost <<- 0                     # unmet demand
while(min(EL) <= T) {
if(EL[1] < EL[2]) {
updateCustomerArr(r, h, lambda, L, s, S)
} else {
updateOrderArr(r, h, lambda, s, S)
}
}
H <<- H
profit <- R - H - Cost
c(profit,lost)
}
set.seed(1)
runs <- matrix(0, 2, 100)
for (i in 1:100) {
runs[,i] = generateOneRun(2, 0.25, 2.5,3, 75, 100, 100)
}
mean(runs[1,])
sd(runs[2,])
1.96 * 111.3432 / sqrt(100)
# Question 2
orderCost <- function(y) y
invertDiscreteCdfDirect <- function(U, prob.vec) {
p.sum <- prob.vec[1]
for(ii in 1:(length(prob.vec)-1)) {
if(U <= p.sum)
return(ii) else
p.sum <- p.sum + prob.vec[ii+1]
}
return(length(prob.vec))
}
invertDiscreteCdfDirect <- Vectorize(invertDiscreteCdfDirect,
vectorize.args="U")
G <- function() {
# Your code here
U <- runif(1)
binom_density <- dbinom(0:10, 10, 0.8)
X <- invertDiscreteCdfDirect(U, binom_density) -1
D <- X + 1
D
}
updateCustomerArr <- function(r, h, lambda, L, s, S) {
H <<- H + h*SS[1]*(EL[1] - cur.time)
cur.time <<- EL[1]
D <- G()
w <- min(D, SS[1])
if(w < D) {
## update unmet demand here
lost <<- lost + D - SS[1]
}
SS[1] <<- SS[1]-w
R <<- R + w*r
if(SS[1] < s & SS[2] == 0) {
SS[2] <<- S - SS[1]
EL[2] <<- cur.time + L
}
U <- runif(1)
EL[1] <<- cur.time - (1/2.5)*log(U)
}
updateOrderArr <- function(r, h, lambda, s, S) {
H <<- H + h*SS[1]*(EL[2] - cur.time)
cur.time <<- EL[2]
Cost <<- Cost + SS[2]
SS[1] <<- SS[1] + SS[2]
SS[2] <<- 0
EL[2] <<- Inf
}
generateOneRun <- function(r, h, lambda, L, s, S, T) {
cur.time <<- 0
SS <<- c(S, 0)                # c(x,y)
EL <<- c(0, Inf)              # c(t_0, t_1)
U <<- runif(1)
EL[1] <<- -(1/2.5)*log(U)
R <<- 0; H <<- 0; Cost <<- 0
lost <<- 0                     # unmet demand
while(min(EL) <= T) {
if(EL[1] < EL[2]) {
updateCustomerArr(r, h, lambda, L, s, S)
} else {
updateOrderArr(r, h, lambda, s, S)
}
}
H <<- H
profit <- R - H - Cost
c(profit,lost)
}
set.seed(1)
runs <- matrix(0, 2, 5900)
for (i in 1:5900) {
runs[,i] = generateOneRun(2, 0.25, 2.5,3, 75, 100, 100)
}
mean(runs[,1])
mean(runs[1,])
mean(runs[2,])
sd(runs[1,])
1.96 * sd(runs[1,]) / sqrt(5900)
set.seed(1)
runs <- matrix(0, 2, 5900)
for (i in 1:5900) {
runs[,i] = generateOneRun(2, 0.25, 2.5,3, 150, 200, 100)
}
mean(runs[2,])
mean(runs[1,])
set.seed(1)
runs <- matrix(0, 2, 5900)
for (i in 1:5900) {
runs[,i] = generateOneRun(2, 0.25, 2.5,3, 75, 125, 100)
}
mean(runs[2,])
mean(runs[1,])
# ----- FUNCTION DEFINITIONS -----
get_nowcast_picture <- function(bot, update) {
# replace with imple
chat_id = update$effective_chat()$id
photo_url <- "https://telegram.org/img/t_logo.png"
bot$sendPhoto(
chat_id = chat_id,
photo = photo_url,
caption = "Telegram Logo"
)
}
get_nowcast_gif <- function(bot, update) {
chat_id = update$effective_chat()$id
animation_url = "https://cdn.dribbble.com/users/244018/screenshots/1506924/reddit-dude.gif"
bot$sendAnimation(chat_id = chat_id,
animation = animation_url,)
}
#####
df <- read.csv("/Users/cynthia/Y3S2/DSA3101/practice/test_fav.csv")
#####
df <- read.csv("Downloads/data.csv")
read.csv("D:/Data Science and Analytics/DSA3101/data.csv")
knitr::opts_chunk$set(echo = TRUE)
a <- factor(rep(c("2", "4", "8"), each =12))
c <- factor(rep(c("400", "500", "650"), times = 12))
b <- factor(rep(c("3", "3", "3", "4", "4", "4"), times = 6))
y <- c(196.6, 197.7,199.8, 198.4, 199.6, 200.6, 196.0, 196.0, 199.4, 198.6, 200.4, 200.9, 198.5, 196.0, 198.4, 197.5, 198.7, 199.6, 197.2, 196.9, 197.6, 198.1, 198.0, 199.0, 197.5, 195.6, 197.4, 197.6, 197.0, 198.5, 196.6, 196.2, 198.1, 198.4, 197.8, 199.8)
aov.model <- aov(y~a*b*c)
summary(aov.model)
res <- residuals(aov.model)
plot(aov.model)
freq <- factor(rep(c("10", "1", "0.1"), each = 12))
env <- factor(rep(c("Air", "H2O", "Salt H2O"), times =12))
y <- c(2.29, 2.06, 1.90, 2.47, 2.05, 1.93, 2.48, 2.23, 1.75, 2.12, 2.03, 2.06, 2.65, 3.20, 3.10, 2.68, 3.18, 3.24, 2.06, 3.96, 3.98, 2.38, 3.64, 3.24, 2.24, 11.00, 9.96, 2.71, 11.00, 10.01, 2.81, 9.06, 9.36, 2.08, 11.30, 10.40)
aov.model <- aov(y~freq*env)
summary(aov.model)
plot(aov.model)
aov.model <- aov(log(y)~freq*env)
simmary(aov.model)
aov.model <- aov(log(y)~freq*env)
summary(aov.model)
plot(aov.model)
118.667-96.333-12.167-10.000
0.167/0.0833
96.333/96.333
10/6
pf(3.65, 2, 6, lower.tail = FALSE)
(11-1)/(2*3)
(11+1)/(2*3)
118.667/11
sqrt(118.667/11)
knitr::opts_chunk$set(echo = TRUE)
a <- factor(rep(c("2", "4", "8"), each =12))
c <- factor(rep(c("400", "500", "650"), times = 12))
b <- factor(rep(c("3", "3", "3", "4", "4", "4"), times = 6))
y <- c(196.6, 197.7,199.8, 198.4, 199.6, 200.6, 196.0, 196.0, 199.4, 198.6, 200.4, 200.9, 198.5, 196.0, 198.4, 197.5, 198.7, 199.6, 197.2, 196.9, 197.6, 198.1, 198.0, 199.0, 197.5, 195.6, 197.4, 197.6, 197.0, 198.5, 196.6, 196.2, 198.1, 198.4, 197.8, 199.8)
aov.model <- aov(y~a*b*c)
summary(aov.model)
res <- residuals(aov.model)
plot(aov.model)
freq <- factor(rep(c("10", "1", "0.1"), each = 12))
env <- factor(rep(c("Air", "H2O", "Salt H2O"), times =12))
y <- c(2.29, 2.06, 1.90, 2.47, 2.05, 1.93, 2.48, 2.23, 1.75, 2.12, 2.03, 2.06, 2.65, 3.20, 3.10, 2.68, 3.18, 3.24, 2.06, 3.96, 3.98, 2.38, 3.64, 3.24, 2.24, 11.00, 9.96, 2.71, 11.00, 10.01, 2.81, 9.06, 9.36, 2.08, 11.30, 10.40)
aov.model <- aov(y~freq*env)
summary(aov.model)
plot(aov.model)
aov.model <- aov(log(y)~freq*env)
summary(aov.model)
plot(aov.model)
118.667-96.333-12.167-10.000
0.167/0.0833
96.333/96.333
10/6
pf(3.65, 2, 6, lower.tail = FALSE)
(11+1)/(2*3)
sqrt(118.667/11)
setwd("C:/Users/Charlotte Liau/dsa3101-2220-10-rain/frontend/bot")

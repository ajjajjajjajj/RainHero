is_valid_cb_function <- function(cb_key) {
return(cb_key %in% callback_keys)
}
source('./botFunctions.R')
require(telegram.bot)
source('./botFunctions.R')
# Testing Bot access token
# use this link to access test bot https://t.me/rainpredictor_testbot
TOKEN <- "6283453880:AAGtUv5MlmZtbMxMZJL5HdYaD9QZv5pQ5sQ"
# Command names
# User will use these to access the commands
# for 'start', the user types '/start'
COMMAND_START <- 'start'
COMMAND_HELP <- 'help'
updater <- Updater(token = TOKEN)
updater <- updater + CommandHandler('start', home) +
CommandHandler('help', rain_help)
callback_query_map <- function(bot, update) {
data <- update$callback_query$data
if (is_valid_cb_function(data)) {
call_callback_function(data)
} else {
bot$answerCallbackQuery(update$effective_chat()$id,
'callback_data doesnt map to anything',
show_alert = T)
}
}
updater <- updater + CallbackQueryHandler(callback_query_start)
require(telegram.bot)
source('./botFunctions.R')
# Testing Bot access token
# use this link to access test bot https://t.me/rainpredictor_testbot
TOKEN <- "6283453880:AAGtUv5MlmZtbMxMZJL5HdYaD9QZv5pQ5sQ"
# Command names
# User will use these to access the commands
# for 'start', the user types '/start'
COMMAND_START <- 'start'
COMMAND_HELP <- 'help'
updater <- Updater(token = TOKEN)
updater <- updater + CommandHandler('start', home) +
CommandHandler('help', rain_help)
callback_query_map <- function(bot, update) {
data <- update$callback_query$data
if (is_valid_cb_function(data)) {
call_callback_function(data)
} else {
bot$answerCallbackQuery(update$effective_chat()$id,
'callback_data doesnt map to anything',
show_alert = T)
}
}
updater <- updater + CallbackQueryHandler(callback_query_map)
updater$start_polling()
require(telegram.bot)
source('./botFunctions.R')
# Testing Bot access token
# use this link to access test bot https://t.me/rainpredictor_testbot
TOKEN <- "6283453880:AAGtUv5MlmZtbMxMZJL5HdYaD9QZv5pQ5sQ"
# Command names
# User will use these to access the commands
# for 'start', the user types '/start'
COMMAND_START <- 'start'
COMMAND_HELP <- 'help'
updater <- Updater(token = TOKEN)
updater <- updater + CommandHandler('start', home) +
CommandHandler('help', rain_help)
callback_query_map <- function(bot, update) {
data <- update$callback_query$data
if (is_valid_cb_function(data)) {
call_callback_function(data, bot, update)
} else {
bot$answerCallbackQuery(update$effective_chat()$id,
'callback_data doesnt map to anything',
show_alert = T)
}
}
updater <- updater + CallbackQueryHandler(callback_query_map)
updater$start_polling()
# callback keys
CB_HOME <- 'home'
callback_keys <- c(CB_GET_PIC, CB_GET_GIF, CB_GET_FAV,
CB_SET_LOCATION, CB_SET_NEW, CB_FIND_LOC, CB_HELP, CB_HOME)
require(telegram.bot)
# ----- InlineKeyboardMarkup standard templates -----
IKM_BACK_TO_HOME <- list(list(
InlineKeyboardButton("Back to home", callback_data = CB_HOME)))
IKM_START_MENU <- InlineKeyboardMarkup(
inline_keyboard = list(
list(InlineKeyboardButton("Get nowcast pic",
callback_data = CB_GET_PIC)),
list(InlineKeyboardButton("Get nowcast GIF",
callback_data = CB_GET_GIF)),
list(InlineKeyboardButton('View predictions for favorite locations',
callback_data = CB_GET_FAV)),
list(InlineKeyboardButton('Set favourite from available locations',
callback_data = CB_SET_LOCATION)),
list(InlineKeyboardButton('Enter new location',
callback_data = CB_SET_NEW)),
list(InlineKeyboardButton('View predictions for available locations',
callback_data = CB_FIND_LOC)),
list(InlineKeyboardButton('Help', callback_data = CB_HELP))))
# ----- FUNCTION DEFINITIONS -----
get_nowcast_picture <- function(bot, update) {
# replace with imple
bot$send_message(update$effective_chat()$id,
'get_nowcast_picture not implemented',
reply_markup = IKM_BACK_TO_HOME)
}
get_nowcast_gif <- function(bot, update) {
# replace with imple
bot$send_message(update$effective_chat()$id,
'get_nowcast_gif not implemented',
reply_markup = IKM_BACK_TO_HOME)
}
get_favourite_predictions <- function(bot, update) {
# replace with imple
bot$send_message(update$effective_chat()$id,
'get_favourite_predictions not implemented',
reply_markup = IKM_BACK_TO_HOME)
}
set_predefined_location <- function(bot, update) {
# replace with imple
bot$send_message(update$effective_chat()$id,
'set_predefined_location not implemented',
reply_markup = IKM_BACK_TO_HOME)
}
set_new_location <- function(bot, update) {
# replace with imple
bot$send_message(update$effective_chat()$id,
'set_new_location not implemented',
reply_markup = IKM_BACK_TO_HOME)
}
find_predefined_locations <- function(bot, update) {
# replace with imple
bot$send_message(update$effective_chat()$id,
'find_predefined_locations not implemented',
reply_markup = IKM_BACK_TO_HOME)
}
# home menu that is displayed. mapped to '/start as well (see bot.R)'
home <- function(bot, update) {
text <- "hola amigo choose an option below to get started!"
bot$sendMessage(update$effective_chat()$id,
text,
reply_markup = IKM_START_MENU)
}
# help page. accessible from start menu only. contains one button to return
# to start menu
rain_help <-  function(bot, update) {
text <- "this is the help page"
bot$send_message(update$effective_chat()$id,
text,
reply_markup = IKM_BACK_TO_HOME)
}
# ----- CALLBACK DATA MAPPINGS -----
# callback data is sent when buttons are clicked, and each of them should map
# to a specific function
# callback keys
CB_HOME <- 'home'
CB_GET_PIC <- 'get_pic'
CB_GET_GIF <- 'get_gif'
CB_GET_FAV <- 'get_fav' # get readings for favorite locations (text)
CB_SET_LOCATION <- 'set_loc' # let's use this for the pre-defined locations
CB_SET_NEW <- 'set_new_loc' # let's use this for custom locations (up to user)
CB_FIND_LOC <- 'find_loc' # list current locations
CB_HELP <- 'help'
callback_keys <- c(CB_GET_PIC, CB_GET_GIF, CB_GET_FAV,
CB_SET_LOCATION, CB_SET_NEW, CB_FIND_LOC, CB_HELP, CB_HOME)
callback_functions <- c(get_nowcast_picture, get_nowcast_gif,
get_favourite_predictions, set_predefined_location,
set_new_location, find_predefined_locations, rain_help,
home)
# ----- CALLBACK -----
# takes in a callback key defined in next section and calls the function
call_callback_function <- function(cb_key, bot, update) {
do.call(callback_functions[which(callback_keys == cb_key)], list(bot, update))
}
# ----- UTILITY FUNCTIONS -----
is_valid_cb_function <- function(cb_key) {
return(cb_key %in% callback_keys)
}
require(telegram.bot)
source('./botFunctions.R')
# Testing Bot access token
# use this link to access test bot https://t.me/rainpredictor_testbot
TOKEN <- "6283453880:AAGtUv5MlmZtbMxMZJL5HdYaD9QZv5pQ5sQ"
# Command names
# User will use these to access the commands
# for 'start', the user types '/start'
COMMAND_START <- 'start'
COMMAND_HELP <- 'help'
updater <- Updater(token = TOKEN)
updater <- updater + CommandHandler('start', home) +
CommandHandler('help', rain_help)
callback_query_map <- function(bot, update) {
data <- update$callback_query$data
if (is_valid_cb_function(data)) {
call_callback_function(data, bot, update)
} else {
bot$answerCallbackQuery(update$effective_chat()$id,
'callback_data doesnt map to anything',
show_alert = T)
}
}
updater <- updater + CallbackQueryHandler(callback_query_map)
updater$start_polling()
# ----- UTILITY FUNCTIONS -----
is_valid_cb_function <- function(cb_key) {
return(cb_key %in% callback_keys)
}
require(telegram.bot)
# ----- InlineKeyboardMarkup standard templates -----
IKM_BACK_TO_HOME <- list(list(
InlineKeyboardButton("Back to home", callback_data = CB_HOME)))
IKM_START_MENU <- InlineKeyboardMarkup(
inline_keyboard = list(
list(InlineKeyboardButton("Get nowcast pic",
callback_data = CB_GET_PIC)),
list(InlineKeyboardButton("Get nowcast GIF",
callback_data = CB_GET_GIF)),
list(InlineKeyboardButton('View predictions for favorite locations',
callback_data = CB_GET_FAV)),
list(InlineKeyboardButton('Set favourite from available locations',
callback_data = CB_SET_LOCATION)),
list(InlineKeyboardButton('Enter new location',
callback_data = CB_SET_NEW)),
list(InlineKeyboardButton('View predictions for available locations',
callback_data = CB_FIND_LOC)),
list(InlineKeyboardButton('Help', callback_data = CB_HELP))))
# ----- FUNCTION DEFINITIONS -----
get_nowcast_picture <- function(bot, update) {
# replace with imple
bot$send_message(update$effective_chat()$id,
'get_nowcast_picture not implemented',
reply_markup = IKM_BACK_TO_HOME)
}
get_nowcast_gif <- function(bot, update) {
# replace with imple
bot$send_message(update$effective_chat()$id,
'get_nowcast_gif not implemented',
reply_markup = IKM_BACK_TO_HOME)
}
get_favourite_predictions <- function(bot, update) {
# replace with imple
bot$send_message(update$effective_chat()$id,
'get_favourite_predictions not implemented',
reply_markup = IKM_BACK_TO_HOME)
}
set_predefined_location <- function(bot, update) {
# replace with imple
bot$send_message(update$effective_chat()$id,
'set_predefined_location not implemented',
reply_markup = IKM_BACK_TO_HOME)
}
set_new_location <- function(bot, update) {
# replace with imple
bot$send_message(update$effective_chat()$id,
'set_new_location not implemented',
reply_markup = IKM_BACK_TO_HOME)
}
find_predefined_locations <- function(bot, update) {
# replace with imple
bot$send_message(update$effective_chat()$id,
'find_predefined_locations not implemented',
reply_markup = IKM_BACK_TO_HOME)
}
# home menu that is displayed. mapped to '/start as well (see bot.R)'
home <- function(bot, update) {
text <- "hola amigo choose an option below to get started!"
bot$sendMessage(update$effective_chat()$id,
text,
reply_markup = IKM_START_MENU)
}
# help page. accessible from start menu only. contains one button to return
# to start menu
rain_help <-  function(bot, update) {
text <- "this is the help page"
bot$send_message(update$effective_chat()$id,
text,
reply_markup = IKM_BACK_TO_HOME)
}
# ----- CALLBACK DATA MAPPINGS -----
# callback data is sent when buttons are clicked, and each of them should map
# to a specific function
# callback keys
CB_HOME <- 'home'
CB_GET_PIC <- 'get_pic'
CB_GET_GIF <- 'get_gif'
CB_GET_FAV <- 'get_fav' # get readings for favorite locations (text)
CB_SET_LOCATION <- 'set_loc' # let's use this for the pre-defined locations
CB_SET_NEW <- 'set_new_loc' # let's use this for custom locations (up to user)
CB_FIND_LOC <- 'find_loc' # list current locations
CB_HELP <- 'help'
callback_keys <- c(CB_GET_PIC, CB_GET_GIF, CB_GET_FAV,
CB_SET_LOCATION, CB_SET_NEW, CB_FIND_LOC, CB_HELP, CB_HOME)
callback_functions <- c(get_nowcast_picture, get_nowcast_gif,
get_favourite_predictions, set_predefined_location,
set_new_location, find_predefined_locations, rain_help,
home)
# ----- CALLBACK -----
# takes in a callback key defined in next section and calls the function
call_callback_function <- function(cb_key, bot, update) {
callback_functions[which(callback_keys == cb_key)](bot, update)
}
# ----- UTILITY FUNCTIONS -----
is_valid_cb_function <- function(cb_key) {
return(cb_key %in% callback_keys)
}
require(telegram.bot)
source('./botFunctions.R')
# Testing Bot access token
# use this link to access test bot https://t.me/rainpredictor_testbot
TOKEN <- "6283453880:AAGtUv5MlmZtbMxMZJL5HdYaD9QZv5pQ5sQ"
# Command names
# User will use these to access the commands
# for 'start', the user types '/start'
COMMAND_START <- 'start'
COMMAND_HELP <- 'help'
updater <- Updater(token = TOKEN)
updater <- updater + CommandHandler('start', home) +
CommandHandler('help', rain_help)
callback_query_map <- function(bot, update) {
data <- update$callback_query$data
if (is_valid_cb_function(data)) {
call_callback_function(data, bot, update)
} else {
bot$answerCallbackQuery(update$effective_chat()$id,
'callback_data doesnt map to anything',
show_alert = T)
}
}
updater <- updater + CallbackQueryHandler(callback_query_map)
updater$start_polling()
require(telegram.bot)
source('./botFunctions.R')
# Testing Bot access token
# use this link to access test bot https://t.me/rainpredictor_testbot
TOKEN <- "6283453880:AAGtUv5MlmZtbMxMZJL5HdYaD9QZv5pQ5sQ"
# Command names
# User will use these to access the commands
# for 'start', the user types '/start'
COMMAND_START <- 'start'
COMMAND_HELP <- 'help'
updater <- Updater(token = TOKEN)
updater <- updater + CommandHandler('start', home) +
CommandHandler('help', rain_help)
callback_query_map <- function(bot, update) {
data <- update$callback_query$data
if (is_valid_cb_function(data)) {
call_callback_function(data, bot, update)
} else {
bot$answerCallbackQuery(update$effective_chat()$id,
'callback_data doesnt map to anything',
show_alert = T)
}
}
updater <- updater + CallbackQueryHandler(callback_query_map)
updater$start_polling()
callback_functions[2]
do.call(callback_functions[2], list(1,2))
do.call(callback_functions[[2]], list(1,2))
updater <- updater + CommandHandler('start', home) +
CommandHandler('help', rain_help)
callback_query_map <- function(bot, update) {
data <- update$callback_query$data
if (is_valid_cb_function(data)) {
call_callback_function(data, bot, update)
} else {
bot$answerCallbackQuery(update$effective_chat()$id,
'callback_data doesnt map to anything',
show_alert = T)
}
}
require(telegram.bot)
source('./botFunctions.R')
# Testing Bot access token
# use this link to access test bot https://t.me/rainpredictor_testbot
TOKEN <- "6283453880:AAGtUv5MlmZtbMxMZJL5HdYaD9QZv5pQ5sQ"
# Command names
# User will use these to access the commands
# for 'start', the user types '/start'
COMMAND_START <- 'start'
COMMAND_HELP <- 'help'
updater <- Updater(token = TOKEN)
updater <- updater + CommandHandler('start', home) +
CommandHandler('help', rain_help)
callback_query_map <- function(bot, update) {
data <- update$callback_query$data
if (is_valid_cb_function(data)) {
call_callback_function(data, bot, update)
} else {
bot$answerCallbackQuery(update$effective_chat()$id,
'callback_data doesnt map to anything',
show_alert = T)
}
}
updater <- updater + CallbackQueryHandler(callback_query_map)
updater$start_polling()
require(telegram.bot)
source('./botFunctions.R')
# Testing Bot access token
# use this link to access test bot https://t.me/rainpredictor_testbot
TOKEN <- "6283453880:AAGtUv5MlmZtbMxMZJL5HdYaD9QZv5pQ5sQ"
# Command names
# User will use these to access the commands
# for 'start', the user types '/start'
COMMAND_START <- 'start'
COMMAND_HELP <- 'help'
updater <- Updater(token = TOKEN)
updater <- updater + CommandHandler('start', home) +
CommandHandler('help', rain_help)
callback_query_map <- function(bot, update) {
data <- update$callback_query$data
if (is_valid_cb_function(data)) {
call_callback_function(data, bot, update)
} else {
bot$answerCallbackQuery(update$effective_chat()$id,
'callback_data doesnt map to anything',
show_alert = T)
}
}
updater <- updater + CallbackQueryHandler(callback_query_map)
updater$start_polling()
require(telegram.bot)
source('./botFunctions.R')
# Testing Bot access token
# use this link to access test bot https://t.me/rainpredictor_testbot
TOKEN <- "6283453880:AAGtUv5MlmZtbMxMZJL5HdYaD9QZv5pQ5sQ"
# Command names
# User will use these to access the commands
# for 'start', the user types '/start'
COMMAND_START <- 'start'
COMMAND_HELP <- 'help'
updater <- Updater(token = TOKEN)
updater <- updater + CommandHandler('start', home) +
CommandHandler('help', rain_help)
callback_query_map <- function(bot, update) {
data <- update$callback_query$data
if (is_valid_cb_function(data)) {
call_callback_function(data, bot, update)
} else {
bot$answerCallbackQuery(update$effective_chat()$id,
'callback_data doesnt map to anything',
show_alert = T)
}
}
updater <- updater + CallbackQueryHandler(callback_query_map)
updater$start_polling()
updater <- updater + CommandHandler('start', home) +
CommandHandler('help', rain_help)
require(telegram.bot)
source('./botFunctions.R')
# Testing Bot access token
# use this link to access test bot https://t.me/rainpredictor_testbot
TOKEN <- "6283453880:AAGtUv5MlmZtbMxMZJL5HdYaD9QZv5pQ5sQ"
# Command names
# User will use these to access the commands
# for 'start', the user types '/start'
COMMAND_START <- 'start'
COMMAND_HELP <- 'help'
updater <- Updater(token = TOKEN)
updater <- updater + CommandHandler('start', home) +
CommandHandler('help', rain_help)
callback_query_map <- function(bot, update) {
data <- update$callback_query$data
if (is_valid_cb_function(data)) {
call_callback_function(data, bot, update)
} else {
bot$answerCallbackQuery(update$effective_chat()$id,
'callback_data doesnt map to anything',
show_alert = T)
}
}
updater <- updater + CallbackQueryHandler(callback_query_map)
updater$start_polling()
require(telegram.bot)
source('./botFunctions.R')
# To run the bot, select all in this file and hit run.
# Then, open your telegram and send '/start'
# Use this link to access test bot: https://t.me/rainpredictor_testbot
# Am not sure what will happen if more than 1 person runs this at the same time tbh
# Functions are defined in botFunctions.R.
# Implementations we discussed should be done there.
# If your functions have a sub menu, or call additional functions,
# please create a separate R file and import them via source()
# Testing Bot access token
TOKEN <- "6283453880:AAGtUv5MlmZtbMxMZJL5HdYaD9QZv5pQ5sQ"
# Command names
# User will use these to access the commands
# for 'start', the user types '/start'
COMMAND_START <- 'start'
COMMAND_HELP <- 'help'
# initialises and adds commands to the Updater (which creates update objects)
updater <- Updater(token = TOKEN)
updater <- updater + CommandHandler('start', home) +
CommandHandler('help', rain_help)
# maps callbacks to the right function, throws an alert for invalid callbacks
callback_query_map <- function(bot, update) {
data <- update$callback_query$data
if (is_valid_cb_function(data)) {
call_callback_function(data, bot, update)
} else {
bot$answerCallbackQuery(update$effective_chat()$id,
'callback_data doesnt map to anything',
show_alert = T)
}
}
updater <- updater + CallbackQueryHandler(callback_query_map)
# function to have the bot start listening to user input. if this is not
# run the bot does nothing
updater$start_polling()
install.packages("sp")
install.packages("gstat")
